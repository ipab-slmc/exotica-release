#!/usr/bin/env python
from __future__ import print_function

import math
from time import time, sleep

import rospy
from visualization_msgs.msg import Marker, MarkerArray

import numpy as np
import pyexotica as exo
from pyexotica.publish_trajectory import *


from collections import OrderedDict
import matplotlib.pyplot as plt

def task_cost_over_time(problem):
    costs = OrderedDict()
    for task_name in problem.cost.task_maps:
        costs[task_name] = np.zeros((problem.T,))
        for t in range(problem.T):
            ydiff = problem.cost.get_task_error(task_name, t)
            S = problem.cost.get_S(task_name, t)
            cost = np.dot(np.dot(ydiff, S), ydiff.T)
            #print(task_name, cost)
            #print(task_name, "ydiff\n", ydiff, "\n")
            #print(task_name, "S\n", S, "\n")
            costs[task_name][t] = cost
    fig = plt.figure()
    for task_name in costs:
        plt.plot(costs[task_name], label=task_name)
    plt.title('Task cost over time')
    plt.legend()
    plt.tight_layout()
    plt.show()


if __name__ == "__main__":
    exo.Setup.init_ros()
    solver_l2 = exo.Setup.load_solver('{exotica_examples}/resources/configs/example_sparseddp_valkyrie_l2.xml')
    problem_l2 = solver_l2.get_problem()
    scene_l2 = problem_l2.get_scene()
    vis_l2 = exo.VisualizationMoveIt(scene_l2)

    # This is now set in the XML
    palm_target = problem_l2.cost.get_goal('PalmPosition', -1)

    rospy.init_node('my_vis2')
    sleep(0.5)
    pub = rospy.Publisher('/exotica/CollisionShapes', MarkerArray, queue_size=1)
    pub2 = rospy.Publisher('/exotica2/CollisionShapes', MarkerArray, queue_size=1)
    sleep(0.5)

    m = Marker()
    m.header.frame_id = 'exotica/world_frame'
    m.action = Marker.ADD
    m.type = Marker.SPHERE
    m.scale.x = m.scale.y = m.scale.z = 0.1
    m.pose.position.x = palm_target[0]
    m.pose.position.y = palm_target[1]
    m.pose.position.z = palm_target[2]
    m.pose.orientation.w = 1.0
    m.color.a = 1.0
    m.color.r = 1.0
    m.id = 1
    ma = MarkerArray()
    ma.markers = [m]

    m2 = Marker()
    m2.header.frame_id = 'exotica2/world_frame'
    m2.action = Marker.ADD
    m2.type = Marker.SPHERE
    m2.scale.x = m2.scale.y = m2.scale.z = 0.1
    m2.pose.position.x = palm_target[0]
    m2.pose.position.y = palm_target[1]
    m2.pose.position.z = palm_target[2]
    m2.pose.orientation.w = 1.0
    m2.color.a = 1.0
    m2.color.g = 1.0
    m2.id = 1
    ma2 = MarkerArray()
    ma2.markers = [m2]

    # for t in range(problem.T):
    #     problem.cost.set_rho('PalmPosition', 0, t)
    # problem.cost.set_goal('PalmPosition', palm_target, -1)
    # problem.cost.set_rho('PalmPosition', 100, -1)


    solution_l2 = solver_l2.solve()

    solver_norm_huber = exo.Setup.load_solver('{exotica_examples}/resources/configs/example_sparseddp_valkyrie_sparse.xml')
    problem_norm_huber = solver_norm_huber.get_problem()

    # warmstart
    # for t in range(problem_l2.T - 1):
    #     u_l2 = solution_l2[t,:]
    #     problem_norm_huber.update(u_l2, t)

    solution_norm_huber = solver_norm_huber.solve()

    print("Solved in", solver_l2.get_planning_time())
    # task_cost_over_time(problem)
    # plot(problem_l2.get_cost_evolution()[1])

    fig, ax = plt.subplots(1, 2)
    ax[0].plot(solution_l2, '.-')
    ax[0].set_ylim(-.7, .7)
    ax[1].plot(solution_norm_huber, '.-')
    ax[1].set_ylim(-.7, .7)
    plt.show()

    # plot(solution_norm_huber, label='norm huber')

    # fig = plt.figure()
    # plt.subplot(1,2,1)
    # plt.title('Positions')
    # plt.plot(problem_L2.X[:38,:].T)
    # plt.subplot(1,2,2)
    # plt.title('Velocities')
    # plt.plot(problem_l2.X[38:,:].T)
    # plt.show()

    # exit(0)

    while True:
        for t in range(problem_l2.T - 1):
            u_l2 = solution_l2[t,:]
            u_norm_huber = solution_norm_huber[t,:]

            problem_l2.update(u_l2, t)
            problem_l2.get_scene().get_kinematic_tree().publish_frames('exotica')

            problem_norm_huber.update(u_norm_huber, t)
            problem_norm_huber.get_scene().get_kinematic_tree().publish_frames('exotica2')

            pub.publish(ma)
            pub2.publish(ma2)
            sleep(0.01)

        sleep(0.5)



    #np.save('l2_cost_1e-3', problem.X)
    # vis.display_trajectory(problem.X[:problem.N].T)

    # append some states for visualization purposes

    # publish_trajectory(problem.X[:problem.N,:].T, 0.5, problem)